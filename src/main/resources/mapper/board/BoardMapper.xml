<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.SideProject.GALE.mapper.board.BoardMapper">

	<!-- 
	<select id="GetLikePopularList" parameterType="int" resultType="Map">
		SELECT idx, category, userid, regdate, locationname, locationaddress, content, likes
		FROM board
		ORDER BY likes DESC
		LIMIT 20
	</select>
	-->
	<select id="GetCategoryBoardDataList" parameterType="int" resultType="com.SideProject.GALE.model.board.BoardReadListDto">
	    SELECT 
	        b.*,
	        COALESCE(f.stored_file_name) AS firstImageUrl
	    FROM board b
	    LEFT JOIN file f ON f.board_number = b.board_number
	    WHERE
	        (
	            CASE 
	                WHEN #{board_Category_Number} = 0 THEN b.board_category_number BETWEEN 100 AND 999
	                WHEN #{board_Category_Number} = 100 THEN b.board_category_number BETWEEN 100 AND 199
	                WHEN #{board_Category_Number} = 200 THEN b.board_category_number BETWEEN 200 AND 299
	                WHEN #{board_Category_Number} = 300 THEN b.board_category_number BETWEEN 300 AND 399
	                ELSE b.board_category_number = #{board_Category_Number}
	            END 
	        )
	        AND (f.order_number IS NULL OR f.order_number = 1)
	    ORDER BY b.view_count DESC
	    LIMIT 0,6;
	</select>
	

	<insert id="Write" parameterType="com.SideProject.GALE.model.board.BoardDto"  useGeneratedKeys="true" keyProperty="board_number">
 		<selectKey resultType="Integer" keyProperty="board_number" order="BEFORE">
			SELECT IFNULL( MAX(board_number)+1, 1 ) FROM board
		</selectKey>
		INSERT INTO board (board_category_number, board_number, userid, regdate, locationname, locationaddress,
			longitude, latitue)
			VALUES (
			#{board_category_number}, #{board_number}, #{userid}, #{regdate}, #{locationname}, #{locationaddress},
			#{longitude}, #{latitue} )
	</insert>
	
	
	<select id="GetBoardUserid" parameterType="int" resultType="String">
		SELECT userid
		FROM board
		WHERE board_number = #{board_Number}
	</select>
	
	
	<select id="Read" parameterType="int" resultType="com.SideProject.GALE.model.board.BoardReadDto">
		SELECT 
		    b.*,
		    COALESCE(AVG(br.satisfaction), 0) AS satisfaction,
		    COALESCE(AVG(br.service), 0) AS service,
		    COALESCE(AVG(br.price), 0) AS price,
		    COALESCE(AVG(br.congestion), 0) AS congestion,
		    COALESCE(AVG(br.accessibility), 0) AS accessibility,
		    COUNT(br.board_number) AS reviewCount,
		    (SELECT GROUP_CONCAT(f.stored_file_name) FROM file f WHERE f.board_number = b.board_number) AS imageArrayFileName
		FROM board b
		LEFT OUTER JOIN board_review br ON br.board_number = b.board_number
		WHERE b.board_number = #{board_Number}
	</select>

	
	<update id="Update" parameterType="com.SideProject.GALE.model.board.BoardDto">
		UPDATE board
		SET board_category_number = #{board_category_number}, locationname = #{locationname}, locationaddress = #{locationaddress},
					longitude = #{longitude}, latitue = #{latitue}
		WHERE board_number=#{board_number} AND userid=#{userid}
	</update>
	
	
	<delete id="Delete" parameterType="int">
	 	DELETE board, file
		FROM board
		LEFT OUTER JOIN file ON board.board_number = file.board_number
		WHERE board.board_number = #{board_Number}
 	</delete>
 	
 	
 	<!--Review-->
	<insert id="Write_Review" parameterType="com.SideProject.GALE.model.board.BoardReviewDetailDto" useGeneratedKeys="true" keyProperty="board_review_number">
	    <selectKey resultType="Integer" keyProperty="board_review_number" order="BEFORE">
	        SELECT IFNULL( MAX(board_review_number)+1, 1 ) FROM board_review
	    </selectKey>
	    INSERT INTO board_review 
	    (board_review_number, board_number, userid, regdate, content,
	        satisfaction, service, price, congestion, accessibility,
	        average)
	    VALUES (
	        #{board_review_number}, #{board_number}, #{userid}, #{regdate}, #{content},
	        #{satisfaction}, #{service}, #{price}, #{congestion}, #{accessibility},
	        (#{satisfaction} + #{service} + #{price} + #{congestion} + #{accessibility}) / 5
	    )
	</insert>
	
	<select id="Read_BoardReivewConciseList" parameterType="int" resultType="com.SideProject.GALE.model.board.BoardReviewConciseReadDto">
	    SELECT
	    br.board_review_number, br.board_number, br.userid, 
	    br.regdate, br.content, br.average,
	    u.nickname AS userNickname,
	    COALESCE (fp.stored_filename) AS userProfileimageUrl,
	    COALESCE (
	    (
	        SELECT GROUP_CONCAT(fr.stored_file_name ORDER BY fr.order_number ASC)
	        FROM file_review fr 
	        WHERE fr.board_review_number = br.board_review_number
	    )) AS imageArrayUrl
	    FROM board_review br
	    LEFT OUTER JOIN file_profile fp ON br.userid = fp.userid
	    LEFT OUTER JOIN user u ON br.userid = u.userid
	    WHERE br.board_number =  #{board_Number}
	</select>
	
	<select id="Read_BoardReviewPagingList" parameterType="java.util.HashMap" resultType="com.SideProject.GALE.model.board.BoardReviewConciseReadDto">
		SELECT
	    	br.board_review_number, br.board_number, br.userid, 
	    	br.regdate, br.content, br.average,
	    	u.nickname AS userNickname,
	    COALESCE (fp.stored_filename) AS userProfileimageUrl,
	    COALESCE (
	    (
	        SELECT GROUP_CONCAT(fr.stored_file_name ORDER BY fr.order_number ASC)
	        FROM file_review fr 
	        WHERE fr.board_review_number = br.board_review_number
	    )) AS imageArrayUrl
	    FROM board_review br
	    LEFT OUTER JOIN file_profile fp ON br.userid = fp.userid
	    LEFT OUTER JOIN user u ON br.userid = u.userid
	    WHERE br.board_number = #{board_Number}
	    <choose>
		    <when test="sortType == 'new'">
		        <if test="orderType == 'desc'">
		            ORDER BY br.regdate DESC
		        </if>
		    </when>
		    <when test="sortType == 'average'">
		        <if test="orderType == 'desc'">
		            ORDER BY br.average DESC
		        </if>
		        <if test="orderType == 'asc'">
		            ORDER BY br.average ASC
		        </if>
		    </when>
		    <otherwise>
		        ORDER BY br.regdate DESC
		    </otherwise>
		</choose>
	    LIMIT #{calculationCursor}, 5
	</select>
	
	
	<select id="GetBoardReviewUserid" parameterType="int" resultType="String">
		SELECT userid
		FROM board_review
		WHERE board_review_number = #{board_Review_Number}
	</select>
	
	
	<select id="Read_Review" parameterType="int" resultType="com.SideProject.GALE.model.board.BoardReviewDetailReadDto">
		SELECT
		    br.*,
		    u.nickname AS userNickname,
		    COALESCE(fp.stored_filename) AS userProfileimageUrl,
		    COALESCE(
		    (
		        SELECT GROUP_CONCAT(fr.stored_file_name ORDER BY fr.order_number ASC)
		        FROM file_review fr 
		        WHERE fr.board_review_number = br.board_review_number
		    )) AS imageArrayUrl
		FROM board_review br
		LEFT OUTER JOIN file_profile fp ON br.userid = fp.userid
		LEFT OUTER JOIN user u ON br.userid = u.userid
		WHERE br.board_review_number = #{board_Review_Number}
	</select>


 	<delete id="Delete_Review" parameterType="int">
 		DELETE board_review, file_review
		FROM board_review
		LEFT JOIN file_review ON board_review.board_review_number = file_Review.board_review_number
		WHERE board_review.board_review_number = #{board_Review_Number}
	</delete>
	
	<insert id="Report_Review" parameterType="com.SideProject.GALE.model.board.ReportReviewDto">
		<selectKey resultType="Integer" keyProperty="report_number" order="BEFORE">
			SELECT IFNULL( MAX(report_number)+1, 1 ) FROM report_review
		</selectKey>
		INSERT INTO report_review
		(report_number, reporter_userid, board_review_number, report_category, content)
		VALUES
		(#{report_number}, #{reporter_userid}, #{board_review_number}, #{report_category}, #{content})
	</insert>
	
</mapper>